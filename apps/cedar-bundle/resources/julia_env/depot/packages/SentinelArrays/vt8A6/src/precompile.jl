function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    Base.precompile(Tuple{typeof(SentinelArrays.defaultsentinel),Type{T} where T})
    Base.precompile(Tuple{typeof(empty),Dict{Any,Any},Type{Symbol},Type{SentinelArray{Int64,1,Int64,Missing,Array{Int64,1}}}})
    Base.precompile(Tuple{typeof(empty),Dict{Any,Any},Type{Symbol},Type{SentinelArray{Int64,1,Int64,Missing,ChainedVector{Int64,Array{Int64,1}}}}})
    Base.precompile(Tuple{typeof(empty),Dict{Symbol,SentinelArray{Int64,1,Int64,Missing,ChainedVector{Int64,Array{Int64,1}}}},Type{Symbol},Type{SentinelArray{T,1,S,Missing,A} where A<:AbstractArray{T,1} where S where T}})
    Base.precompile(Tuple{typeof(merge!),Dict{Symbol,SentinelArray{T,1,S,Missing,A} where A<:AbstractArray{T,1} where S where T},Dict{Symbol,SentinelArray{Int64,1,Int64,Missing,Array{Int64,1}}}})
    Base.precompile(Tuple{typeof(merge!),Dict{Symbol,SentinelArray{T,1,S,Missing,A} where A<:AbstractArray{T,1} where S where T},Dict{Symbol,SentinelArray{Int64,1,Int64,Missing,ChainedVector{Int64,Array{Int64,1}}}}})
    Base.precompile(Tuple{typeof(resize!),SentinelArray{Dates.Date,1,Dates.Date,Missing,Array{Dates.Date,1}},Int64})
    Base.precompile(Tuple{typeof(resize!),SentinelArray{Dates.DateTime,1,Dates.DateTime,Missing,Array{Dates.DateTime,1}},Int64})
    Base.precompile(Tuple{typeof(resize!),SentinelArray{Dates.Time,1,Dates.Time,Missing,Array{Dates.Time,1}},Int64})
    Base.precompile(Tuple{typeof(resize!),SentinelArray{Float64,1,Float64,Missing,Array{Float64,1}},Int64})
    Base.precompile(Tuple{typeof(resize!),SentinelArray{Int64,1,Int64,Missing,Array{Int64,1}},Int64})
    Base.precompile(Tuple{typeof(setindex!),Dict{Symbol,AbstractArray{T,1} where T},ChainedVector{Union{Missing, Bool},Array{Union{Missing, Bool},1}},Symbol})
    Base.precompile(Tuple{typeof(setindex!),Dict{Symbol,AbstractArray{T,1} where T},SentinelArray{Dates.Date,1,Dates.Date,Missing,Array{Dates.Date,1}},Symbol})
    Base.precompile(Tuple{typeof(setindex!),Dict{Symbol,AbstractArray{T,1} where T},SentinelArray{Dates.Date,1,Dates.Date,Missing,ChainedVector{Dates.Date,Array{Dates.Date,1}}},Symbol})
    Base.precompile(Tuple{typeof(setindex!),Dict{Symbol,AbstractArray{T,1} where T},SentinelArray{Dates.DateTime,1,Dates.DateTime,Missing,Array{Dates.DateTime,1}},Symbol})
    Base.precompile(Tuple{typeof(setindex!),Dict{Symbol,AbstractArray{T,1} where T},SentinelArray{Dates.DateTime,1,Dates.DateTime,Missing,ChainedVector{Dates.DateTime,Array{Dates.DateTime,1}}},Symbol})
    Base.precompile(Tuple{typeof(setindex!),Dict{Symbol,AbstractArray{T,1} where T},SentinelArray{Dates.Time,1,Dates.Time,Missing,Array{Dates.Time,1}},Symbol})
    Base.precompile(Tuple{typeof(setindex!),Dict{Symbol,AbstractArray{T,1} where T},SentinelArray{Dates.Time,1,Dates.Time,Missing,ChainedVector{Dates.Time,Array{Dates.Time,1}}},Symbol})
    Base.precompile(Tuple{typeof(setindex!),Dict{Symbol,AbstractArray{T,1} where T},SentinelArray{Float64,1,Float64,Missing,Array{Float64,1}},Symbol})
    Base.precompile(Tuple{typeof(setindex!),Dict{Symbol,AbstractArray{T,1} where T},SentinelArray{Float64,1,Float64,Missing,ChainedVector{Float64,Array{Float64,1}}},Symbol})
    Base.precompile(Tuple{typeof(setindex!),Dict{Symbol,AbstractArray{T,1} where T},SentinelArray{Int64,1,Int64,Missing,Array{Int64,1}},Symbol})
    Base.precompile(Tuple{typeof(setindex!),Dict{Symbol,AbstractArray{T,1} where T},SentinelArray{Int64,1,Int64,Missing,ChainedVector{Int64,Array{Int64,1}}},Symbol})
    Base.precompile(Tuple{typeof(setindex!),Dict{Symbol,AbstractArray{T,1} where T},SentinelArray{String,1,UndefInitializer,Missing,Array{String,1}},Symbol})
    Base.precompile(Tuple{typeof(setindex!),Dict{Symbol,AbstractArray{T,1} where T},SentinelArray{String,1,UndefInitializer,Missing,ChainedVector{String,Array{String,1}}},Symbol})
    Base.precompile(Tuple{typeof(setindex!),Dict{Symbol,SentinelArray{Int64,1,Int64,Missing,Array{Int64,1}}},SentinelArray{Int64,1,Int64,Missing,Array{Int64,1}},Symbol})
    Base.precompile(Tuple{typeof(setindex!),Dict{Symbol,SentinelArray{Int64,1,Int64,Missing,ChainedVector{Int64,Array{Int64,1}}}},SentinelArray{Int64,1,Int64,Missing,ChainedVector{Int64,Array{Int64,1}}},Symbol})
    Base.precompile(Tuple{typeof(setindex!),Dict{Symbol,SentinelArray{T,1,S,Missing,A} where A<:AbstractArray{T,1} where S where T},SentinelArray{Float64,1,Float64,Missing,Array{Float64,1}},Symbol})
    Base.precompile(Tuple{typeof(setindex!),Dict{Symbol,SentinelArray{T,1,S,Missing,A} where A<:AbstractArray{T,1} where S where T},SentinelArray{Float64,1,Float64,Missing,ChainedVector{Float64,Array{Float64,1}}},Symbol})
end
